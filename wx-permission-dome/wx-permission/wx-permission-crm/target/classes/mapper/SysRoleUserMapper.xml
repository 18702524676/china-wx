<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wx.permission.dao.SysRoleUserMapper" >

  <!--开启redis二级缓存，注意如果是连表查询，在select标签加上useCache=false 不使用二级缓存，这样做的目的是为了防止脏数据-->
  <!--insert、update、delete语句,flushCache默认为true，表示任何时候语句被调用，都会导致本地缓存和二级缓存被清-->
  <cache type="com.wx.redis.cache.RedisCache"/>

  <resultMap id="BaseResultMap" type="com.wx.permission.model.SysRoleUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP" />
    <result column="operate_ip" property="operateIp" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, role_id, user_id, operator, operate_time, operate_ip
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sys_role_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sys_role_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyProperty="id"  parameterType="com.wx.permission.model.SysRoleUser" >
    insert into sys_role_user (id, role_id, user_id, 
      operator, operate_time, operate_ip
      )
    values (#{id,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{operator,jdbcType=VARCHAR}, #{operateTime,jdbcType=TIMESTAMP}, #{operateIp,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id"  parameterType="com.wx.permission.model.SysRoleUser" >
    insert into sys_role_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="operateTime != null" >
        operate_time,
      </if>
      <if test="operateIp != null" >
        operate_ip,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateIp != null" >
        #{operateIp,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wx.permission.model.SysRoleUser" >
    update sys_role_user
    <set >
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        operate_time = #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateIp != null" >
        operate_ip = #{operateIp,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wx.permission.model.SysRoleUser" >
    update sys_role_user
    set role_id = #{roleId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      operator = #{operator,jdbcType=VARCHAR},
      operate_time = #{operateTime,jdbcType=TIMESTAMP},
      operate_ip = #{operateIp,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--wx 根据用户id获取角色集合id 2018-9-8 -->
  <select id="getRoleIdListByUserId" resultType="java.lang.Integer">
    SELECT role_id
    FROM sys_role_user
    WHERE
    user_id = #{userId}
  </select>

  <!--wx 根据角色id查询用户id集合 2018-9-8 -->
  <select id="getUserIdListByRoleId" resultType="java.lang.Integer">
    SELECT user_id
    FROM sys_role_user
    WHERE role_id = #{roleId}
  </select>

  <!--wx 根据角色id删除用户数据 2018-9-9 -->
  <delete id="deleteByRoleId">
    DELETE FROM sys_role_user
    WHERE role_id = #{roleId}
  </delete>

  <!--wx 批量插入 2018-9-9-->
  <insert id="batchInsert">
    insert into sys_role_user (role_id, user_id, operator, operate_time, operate_ip)
    values
    <foreach collection="roleUserList" item="roleUser" separator=",">
      ( #{roleUser.roleId}, #{roleUser.userId}, #{roleUser.operator}, #{roleUser.operateTime}, #{roleUser.operateIp})
    </foreach>
  </insert>

  <!--wx 根据角色id集合查询用户id集合 2018-9-9 -->
  <select id="getUserIdListByRoleIdList" parameterType="map" resultType="int" >
    SELECT user_id
    FROM sys_role_user
    WHERE role_id IN
    <foreach collection="roleIdList" item="roleId" open="(" close=")" separator=",">
      #{roleId}
    </foreach>
  </select>

</mapper>